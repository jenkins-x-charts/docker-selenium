{{- if .Values.videoRecorder.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "seleniumGrid.video.fullname" . }}
data:
  video.sh: |
    #!/usr/bin/env bash
    set -ex
    #apt-get update
    #apt-get -qqy --no-install-recommends install curl jq x11-utils

    DISPLAY_CONTAINER_NAME=localhost
    DISPLAY_NUM=${DISPLAY_NUM}
    FRAME_RATE=${FRAME_RATE:-$SE_FRAME_RATE}
    CODEC=${CODEC:-$SE_CODEC}
    PRESET=${PRESET:-$SE_PRESET}
    export DISPLAY=${DISPLAY_CONTAINER_NAME}:${DISPLAY_NUM}.0

    return_code=1
    max_attempts=50
    attempts=0
    mkfifo /videos/uploadpipe
    echo 'Checking if the display is open...'
    until [ $attempts -eq $max_attempts ]
    do
        if xset b off
        then
            break
        else
            echo 'Waiting before next display check...'
            sleep 0.5
        fi
        attempts=$((attempts+1))
    done
    VIDEO_SIZE=$(xdpyinfo | grep 'dimensions:' | awk '{print $2}')

    video_location_default=/videos
    recording_started="false"
    session_detected="false"
    video_file_name=""
    video_file=""
    upload_destination=""
    while sleep 1
    do
        curl -s --request GET 'http://'${DISPLAY_CONTAINER_NAME:-localhost}':'${DISPLAY_CONTAINER_PORT:-5555}'/status' > /tmp/status.json || continue
        cat /tmp/status.json
        session_id=$(jq -r '.[]?.node?.slots | .[0]?.session?.sessionId' /tmp/status.json)
        echo $session_id
        if [ "$session_id" != "null" -a "$session_id" != "" -a $session_detected = "false" ]
        then
            session_detected="true"
            video_file_name="$session_id.mp4"
            video_file="${VIDEO_LOCATION:-$video_location_default}/$video_file_name"
            upload_destination=$(jq -r '.[]?.node?.slots | .[0]?.session?.capabilities["video:uploadDestination"]' /tmp/status.json)
            if [ "$upload_destination" = "" ]
            then
              if ["$UPLOAD_DESTINATION_FOLDER" != "" ]
              then
                upload_destination=${UPLOAD_DESTINATION_FOLDER}${video_file_name}
              else
                echo "No upload destination found. Skipping recording of session $session_id"
                sleep 2
                continue
              fi
            fi
            echo "Upload destination is $upload_destination"
            echo "Starting to record video"
            ffmpeg -nostdin -y -f x11grab -video_size ${VIDEO_SIZE} -r ${FRAME_RATE} -i ${DISPLAY} -codec:v ${CODEC} ${PRESET} -pix_fmt yuv420p $video_file &
            recording_started="true"
            echo "Video recording started"
        elif [ "$session_id" = "null" -o "$session_id" = "" -a $session_detected = "true" ]
        then
            if [ $recording_started = "true" ]
            then
              echo "Stopping to record video"
              kill -INT %1
              fg
              echo $video_file $upload_destination > /videos/uploadpipe &
              recording_started="false"
            fi
            session_detected="false"
            echo "Video recording stopped"
        elif [ $recording_started = "true" ];
        then
            echo "Video recording in progress"
        elif [ $session_detected = "true" ];
        then
            echo "Ignored session in progress"
        else
            echo "No session in progress"
        fi
    done
{{- end }}
